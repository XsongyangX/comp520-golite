/* The first section of a bison file contains:
 *    1. A code section for includes and other arbitrary C code. Copied to the parser verbatim
 *    2. Definition of the yylval union
 *    3. Definition of the tokens
 *    4. Precedence directives
 *    5. The start token
 *    6. Parser options
 */

/* Code section */
%{


#include <stdio.h>
#include <stdlib.h>

extern int isParse;

// Reference to the line number generated by the scanner
extern int yylineno;
// Reference to the yylex function to quiet a compiler warning
int yylex();

// The yyerror function is called on any syntax error. When using %error-verbose, this function
// takes a single argument (a string) which contains a detailed explanation of the error.
// Otherwise it takes no arguments and it is up to the user to format the error using a minimal
// description provided in yytext.
void yyerror(const char *s) {
	fprintf(stderr, "Error: (line %d) %s\n", yylineno, s);
	exit(1);
}
%}


/* The union directive defines the yylval union used for associating (a) terminals (tokens)
 * returned by flex with additional scanning data (such as identifier/constant values); and
 * optionally (b) non-terminals (variables in productions) with AST information if any.
 */
%union {
	int intval;
	char *identifier;
    float floatval;
    char *strval;
    int boolval;
}

/* Token directives define the token types to be returned by the scanner (excluding character
 * tokens). Each token definition takes [optionally, a reference to the associated field in the
 * yylval union] and an identifier. Multiple tokens can eb defined per directive by using a list
 * of identifiers separated by spaces.
 */
%token tINT
%token tFLOAT
%token tSTRING
%token tBOOL
%token tRUNE
%token tINTLITERAL
%token tFLOATLITERAL
%token tSTRINGLITERAL
%token tRAWSTRINGLITERAL
%token tBOOLLITERAL
%token tRUNELITERAL
%token tIDENTIFIER
%token tTYPE
%token tSTRUCT
%token tFUNC
%token tGEQ
%token tLEQ
%token tNEQ
%token tEQ
%token tLSHIFT
%token tRSHIFT
%token tANDNOT
%token tDOUBLEPLUS
%token tDOUBLEMINUS
%token tVAR
%token tPRINT
%token tPRINTLN
%token tBREAK
%token tCONTINUE
%token tAPPEND
%token tLEN
%token tCAP
%token tREAD
%token tWHILE
%token tIF
%token tELSE
%token tFOR
%token tSWITCH
%token tCASE
%token tDEFAULT
%token tRETURN
%token tCOLONASSIGN
%token tAND
%token tOR
%token tPACKAGE
%token UNARY

/* Precedence directives resolve grammar ambiguities by breaking ties between shift/reduce
 * operations. Tokens are grouped into precendence levels, with lower precedence coming first
 * and then higher precedence in later directives. Tokens specified in the same directive have
 * the same precedence. Ties at the same level are broken using either %left or %right, which
 * denote left-associative and right-associative respectively.
 */



%left tOR
%left tAND
%left tEQ tNEQ 
%left tGEQ tLEQ '>' '<'
%left '+' '-'
%left '*' '/'
%left UNARY

/* Start token (by default if this is missing it takes the first production */
%start prgrm

/* Generate the yylloc structure used for storing line numbers with tokens */
%locations
/* Generate detailed error messages */
%error-verbose

/* The second section of a bison file contains the productions. Note that rules with the
 * same LHS may be joined together and separated with a pipe.
 */
%% 

/* Represents the entire program. Makes sure there is only one package dec */
prgrm           : tPACKAGE tIDENTIFIER stmts
                ;

/* Expressions of all kinds. Expands to trm for precedence reasons. Other predecence
is to be solved using directives. */
exp             : '+' exp %prec UNARY {$$ = makeExp_pos($2);}
                | '-' exp %prec UNARY {$$ = makeExp_neg($2);}
                | '!' exp %prec UNARY {$$ = makeExp_not($2);} 
                | '^' exp %prec UNARY {$$ = makeExp_uxor($2);}
                | exp '<' exp {$$ = makeExp_lt($1, $3);}
                | exp '>' exp {$$ = makeExp_gt($1, $3);}
                | exp tEQ exp {$$ = makeExp_eq($1, $3);}
                | exp tNEQ exp {$$ = makeExp_neq($1, $3);}
                | exp tGEQ exp {$$ = makeExp_geq($1, $3);}
                | exp tLEQ exp {$$ = makeExp_leq($1, $3);}
                | exp tAND exp {$$ = makeExp_and($1, $3);}
                | exp tOR exp  {$$ = makeExp_or($1, $3);}
                | exp '+' trm  {$$ = makeExp_plus($1, $3);}
                | exp '-' trm  {$$ = makeExp_minus($1, $3);}
                | exp '|' trm  {$$ = makeExp_bor($1, $3);}
                | exp '^' trm  {$$ = makeExp_xor($1, $3);}
                | tAPPEND '(' exp ',' exp ')' {$$ = makeExp_append($3, $5);}
                | tLEN '(' exp ')' {$$ = makeExp_len($3);}
                | tCAP '(' exp ')' {$$ = makeExp_cap($3);}
                | trm {$$ = $1;}
                ;

/* Expansion of exp for precedence. Expands to ftr */
trm             : trm '*' ftr {$$ = makeExp_times($1, $3);}
                | trm '/' ftr {$$ = makeExp_div($1, $3);}
                | trm '%' ftr {$$ = makeExp_mod($1, $3);}
                | trm tLSHIFT ftr {$$ = makeExp_lshift($1, $3);}
                | trm tRSHIFT ftr {$$ = makeExp_rshift($1, $3);}
                | trm '&' ftr {$$ = makeExp_band($1, $3);}
                | trm tANDNOT ftr {$$ = makeExp_andnot($1, $3);}
                | ftr {$$ = $1;}
                ;

/* The final expansion of exp. Can expand back to exp with parentheses. Also handles literals
 and function calls. */
ftr             : '(' exp ')' {$$ = $2;}
                | tIDENTIFIER {$$ = makeExp_id($1);}
                | tINTLITERAL {$$ = makeEXP_int($1);}
                | tFLOATLITERAL {$$ = makeEXP_float($1);}
                | tBOOLLITERAL {$$ = makeEXP_bool($1);}
                | tRUNELITERAL {$$ = makeEXP_rune($1);}
                | tSTRINGLITERAL {$$ = makeEXP_str($1);}
                | tIDENTIFIER '(' idents ')' ';' {$$ = makeExp_func($1, 0, $3);}
                ;


/* variable declarations */
dec             : tVAR idents type ';' {$$ = makeDECL_norhs();}
                | tVAR idents type '=' exps ';'
                | tVAR idents '=' exps ';' {$$ = makeSTMT_multiassmt(yylineno, )}
                | tVAR '(' decdistributed ')' {$$ = $3;}
                | typedec ';' {$$ = $1;}
                ;

/* an arbitrily long list of expressions, separated by commas */
exps            : exps ',' exp {$$ = makeSDecl($1, NULL, niltype, 0); $$->next = $3;}
                | exp {$$ = makeSDecl($1, NULL, niltype, 0);}
                ;

/* an arbitrily long list of identifiers, separated by commas */
idents          : idents ',' tIDENTIFIER
                | tIDENTIFIER
                ;

/* a block of lists of identifiers. Used in the distributed var () type statements. */
blockidents     : blockidents idents type
                ;

/* A block of things put into a distributed var () statement */
decdistributed  : decdistributed idents type
                | decdistributed idents type '=' exps
                | decdistributed idents '=' exps
                | idents type
                | idents type '=' exps
                | idents '=' exps
                ;

/* Used for declaring user-defined types */
typedec         : tTYPE tIDENTIFIER type
                | tTYPE tIDENTIFIER tSTRUCT '{' blockidents '}'
                | tTYPE '(' typedistributed ')'
                ;

/* Used for declaring user defined types with the distributed type () syntax */
typedistributed : typedistributed tIDENTIFIER type
                | typedistributed tIDENTIFIER tSTRUCT '{' blockidents '}'
                | tIDENTIFIER type
                | tIDENTIFIER tSTRUCT '{' blockidents '}'
                ;

/* function definitions */
funcdef         : tFUNC tIDENTIFIER '(' typelist ')' type '{' stmts '}' 
                    {$$ = makeFCTN(yylineno, $2, 0, $4, $6, NULL, 0, $8);}
                ;

/* Defines the syntax for types in function headers */
typelist        : typelist ',' tIDENTIFIER type 
                | typelist ',' idents type
                | tIDENTIFIER type
                | idents type
                ;

/* Defines the various kinds of types that can be used. Should structs be in here...? */
type            : tINT
                | tFLOAT
                | tBOOL
                | tRUNE
                | tSTRING
                | '[' ']' tINT
                | '[' ']' tFLOAT
                | '[' ']' tBOOL
                | '[' ']' tRUNE
                | '[' ']' tSTRING
                | '[' tINTLITERAL ']' tINT
                | '[' tINTLITERAL ']' tFLOAT
                | '[' tINTLITERAL ']' tBOOL
                | '[' tINTLITERAL ']' tRUNE
                | '[' tINTLITERAL ']' tSTRING
                ;

/* A block of statements */
stmts           : stmts stmt {$$ = makeSTMT_block(yylineno, $2);}
                | stmt {$$ = $1;}
                ;

/* Defines the kinds of statements that can be used in any context 
A potential issue is having returnstmt in here. Should you be able to return from anywhere?*/
stmt            : simplestmt {$$ = $1;}
                | tPRINT '(' exps ')' ';' {$$ = makeSTMT_print(yylineno, $3, 0);}
                | tPRINTLN '(' exps ')' ';' {$$ = makeSTMT_print(yylineno, $3, 1);}
                | tBREAK ';' {$$ = makeSTMT_break(yylineno);}
                | tCONTINUE ';' {$$ = makeSTMT_break(continue);}
                | ifstmt {$$ = $1;}
                | switchstmt {$$ = $1;}
                | forstmt {$$ = $1;}
                | returnstmt {$$ = $1;}
                ;

/* A subset of statements that can be used in certain extra contexts,
such as before the conditional expressions of if statements */
simplestmt      : tIDENTIFIER '(' idents ')' ';' {$$ = makeExp_func($1, 0, $3);} 
                | tIDENTIFIER tDOUBLEMINUS ';' {ident = makeExp_id($1); one = makeEXP_int(1); 
                    identMinus = makeExp_sub(ident, one);  $$ = makeSTMT_assmt(yylineno, $1, identMinus);}
                | tIDENTIFIER tDOUBLEPLUS ';' {ident = makeExp_id($1); one = makeEXP_int(1); 
                    identPlus = makeExp_plus(ident, one);  $$ = makeSTMT_assmt(yylineno, $1, identPlus);}
                | asnexps ';'
                |
                ;

/* Defines all kinds of if statement, with or without a simplestmt before the conditional */
ifstmt          : tIF exp '{' stmts '}' {$$ = makeSTMT_if(yylineno, $2, NULL, $4, NULL);}
                | tIF simplestmt exp '{' stmts '}' {$$ = makeSTMT_if(yylineno, $3, $2, $5, NULL);}
                | tIF exp '{' stmts '}' tELSE '{' stmts '}' {elseStat = makeSTMT_else(yylineno, $8); 
                    $$ = makeSTMT_if(yylineno, $2, NULL, $4, elseStat);}
                | tIF simplestmt exp '{' stmts '}' tELSE '{' stmts '}' {elseStat = makeSTMT_else(yylineno, $10); 
                    $$ = makeSTMT_if(yylineno, $3, $2, $5, elseStat);}
                | tIF exp '{' stmts '}' tELSE ifstmt {$$ = makeSTMT_if(yylineno, $3, $2, $5, elseStat);}
                | tIF simplestmt exp '{' stmts '}' tELSE ifstmt
                ;

/* Defines switch statements */
switchstmt      : tSWITCH '{' switchbody '}' {$$ = makeSTMT_switch(yylineno, NULL, NULL, $3);}
                | tSWITCH simplestmt '{' switchbody '}' {$$ = makeSTMT_switch(yylineno, NULL, $2, $4);}
                | tSWITCH exp '{' switchbody '}' {$$ = makeSTMT_switch(yylineno, $2, NULL, $4);}
                | tSWITCH simplestmt exp '{' switchbody '}' {$$ = makeSTMT_switch(yylineno, $3, $2, $5);}
                ;

/* Defines the body of a switch statement Handling expression list as cases?*/
switchbody      : switchbody tCASE exps ':' stmts {$$ = makeSTMT_case(yylineno, $3, $5, $1);}
                | switchbody tDEFAULT ':' stmts {$$ = makeSTMT_case(yylineno, NULL, $4, $1);}
                | tCASE exps ':' stmts {$$ = makeSTMT_case(yylineno, $2, $4, NULL);}
                | tDEFAULT ':' stmts {$$ = makeSTMT_case(yylineno, NULL, $3, NULL);}
                ;

/* Defines all three supported kinds of support statements */
forstmt         : tFOR '{' stmts '}' {$$ = makeSTMT_for(yylineno, NULL, NULL, $3, NULL);}
                | tFOR exp '{' stmts '}' {$$ = makeSTMT_for(yylineno, NULL, $2, $4, NULL);}
                | tFOR simplestmt exp simplestmt '{' stmts '}' {$$ = makeSTMT_for(yylineno, $2, $3, $6, $4);}
                ;

/* Defines return statements */
returnstmt      : tRETURN ';' {$$ = makeSTMT_return(yylineno, NULL);}
                | tRETURN exp ';' {$$ = makeSTMT_return(yylineno, $2);}
                ;

/* Defines the kind of valid assignment expressions.
Again, we need to account for an equal number of idents and exps on either side.
We also need to account for the operand-equals construction. */
asnexps         : tIDENTIFIER ',' asnexps ',' exp
                | tIDENTIFIER '=' exp
                | tIDENTIFIER tCOLONASSIGN exp
                | tIDENTIFIER tPLUSASSIGN exp
                | tIDENTIFIER tMINUSASSIGN exp
                | tIDENTIFIER tTIMESASSIGN exp
                | tIDENTIFIER tDIVASSIGN exp
                | tIDENTIFIER tMODASSIGN exp
                | tIDENTIFIER tANDASSIGN exp
                | tIDENTIFIER tORASSIGN exp
                | tIDENTIFIER tXORASSIGN exp
                | tIDENTIFIER tANDNOT '=' exp
                | tIDENTIFIER tLSHIFT '=' exp
                | tIDENTIFIER tRSHIFT '=' exp
                ;






%%